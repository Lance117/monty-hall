{"version":3,"sources":["SimBarGraph.js","MontySim.js","Header.js","MontyGame.js","App.js","index.js"],"names":["SimBarGraph","props","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","updateData","chart","stayWinRate","chartInstance","update","state","numTrials","chartReference","this","chosenDoor","winRate","stayWins","i","Math","floor","random","style","width","textAlign","ref","reference","options","responsive","scales","yAxes","stacked","barThickness","fontSize","categoryPercentage","xAxes","ticks","beginAtZero","legend","display","Component","MontySim","handleChange","selectedOption","setState","value","className","marginLeft","onChange","placeholder","React","Header","handleOpenModal","showModal","handleOpenStats","showStats","handleCloseModal","handleCloseStats","ReactModal","setAppElement","document","getElementById","switchWins","parseInt","window","localStorage","getItem","switchLosses","stayLosses","toFixed","switchWinRate","onClick","isOpen","contentLabel","onRequestClose","shouldCloseOnOverlayClick","overlayClassName","margin","href","MontyGame","handleClick","nonSelected","filter","x","finished","selected","revealed","revealedDoors","switched","length","winner","handleSubmit","ceil","key","toString","isSelected","isOpened","isWinner","status","revealedStatus","finishedMsg","indexOf","setItem","concat","renderDoor","marginTop","keyPressDelayRange","sentenceDelayPerCharRange","blinkAnimationDuration","Door","doorname","revealClass","src","alt","App","flexDirection","justifyContent","ReactDOM","render"],"mappings":"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","file":"static/js/main.6bc2023b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {HorizontalBar} from 'react-chartjs-2';\n\nexport default class SimBarGraph extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numTrials: this.props.numTrials\n        }\n\n        this.chartReference = {};\n    }\n\n    componentDidUpdate() {\n        if (this.props.numTrials) {\n            let stayWins = 0;\n            let chosenDoor;\n            let winningDoor;\n            let winRate;\n            for (let i = 1; i <= this.props.numTrials; i++) {\n                chosenDoor = Math.floor(Math.random() * 3);\n                winningDoor = Math.floor(Math.random() * 3);\n                if (winningDoor === chosenDoor) {\n                    stayWins += 1;\n                }\n                winRate = Math.floor((stayWins / i) * 100);\n                this.updateData(this.chartReference, winRate)\n            }\n        }\n    }\n\n    // helper variables & functions\n    data = {\n        labels: ['Stay', 'Switch'],\n        datasets: [\n            {\n                label: 'Win %',\n                backgroundColor: 'rgba(122,200,0,0.6)',\n                borderColor: 'green',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(122,200,0,0.4)',\n                hoverBorderColor: 'rgba(255,99,132,1)',\n                data: [50, 50]\n            },\n            {\n                label: 'Loss %',\n                backgroundColor: 'rgba(242,97,48,0.6)',\n                borderColor: 'rgba(255,99,132,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(242,97,48,0.4)',\n                hoverBorderColor: 'rgba(255,99,132,1)',\n                data: [50, 50]\n            }\n        ]\n    };\n\n    updateData = (chart, stayWinRate) => {\n        chart.props.data.datasets[0].data = [stayWinRate, 100 - stayWinRate]; \n        chart.props.data.datasets[1].data = [100 - stayWinRate, stayWinRate]; \n        chart.chartInstance.update();\n    }\n    //-----------------\n\n    render() {\n        return (\n            <div style={{width: \"500px\", textAlign: \"center\"}}>\n                <h2>Win Rate by Strategy</h2>\n                <HorizontalBar\n                    ref={(reference) => this.chartReference = reference}\n                    data={this.data}\n                    options={{\n                        responsive: true,\n                        scales: {\n                            yAxes: [{\n                                stacked: true,\n                                barThickness: \"flex\",\n                                fontSize: 15,\n                                categoryPercentage: 0.5\n                            }],\n                            xAxes: [{\n                                stacked: true,\n                                ticks: {\n                                    beginAtZero: true,\n                                    fontSize: 15\n                                }\n                            }]\n                        },\n                        legend: {display: false},\n                    }}\n                />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Select from 'react-select';\nimport SimBarGraph from './SimBarGraph'\n\nclass MontySim extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numTrials: null\n        };\n\n    }\n\n    handleChange = selectedOption => {\n        this.setState({ numTrials: selectedOption.value });\n    }\n\n    render() {\n        const { selectedOption } = this.state;\n        return (\n            <div className=\"monty-sim\">\n                <div style={{ width: \"338px\", marginLeft: \"100px\" }}>\n                    <Select\n                        value={selectedOption}\n                        onChange={this.handleChange}\n                        options={options}\n                        placeholder=\"Welcome to simulator! Choose N rounds:\"\n                    />\n                </div>\n                <SimBarGraph numTrials={this.state.numTrials} />\n            </div>\n        )\n    }\n}\n\n// Variables\nconst options = [\n    { value: 50, label: '50' },\n    { value: 100, label: '100' },\n    { value: 500, label: '500' },\n    { value: 1000, label: '1,000' },\n];\n//---------\n\nexport default MontySim;","import React from 'react';\nimport ReactModal from 'react-modal';\n\nclass Header extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            showModal: false,\n            showStats: false,\n        };\n    }\n\n    componentDidMount() {\n        ReactModal.setAppElement(document.getElementById('root'));\n    }\n\n    handleOpenModal = () => {\n        this.setState({showModal: true});\n    }\n\n    handleOpenStats = () => {\n        this.setState({showStats: true});\n    }\n\n    handleCloseModal = () => {\n        this.setState({showModal: false});\n    }\n\n    handleCloseStats = () => {\n        this.setState({showStats: false});\n    }\n\n    render() {\n        let switchWins = parseInt(window.localStorage.getItem('switchWins') || 0);\n        let switchLosses = parseInt(window.localStorage.getItem('switchLosses') || 0);\n        let stayWins = parseInt(window.localStorage.getItem('stayWins') || 0);\n        let stayLosses = parseInt(window.localStorage.getItem('stayLosses') || 0);\n\n        let stayWinRate = `${((stayWins / (stayWins + stayLosses)) * 100).toFixed(2)}%`;\n        if (stayWins + stayLosses === 0) stayWinRate = 'no rounds played'\n        let switchWinRate = `${((switchWins / (switchWins + switchLosses)) * 100).toFixed(2)}%`;\n        if (switchWins + switchLosses === 0) switchWinRate = 'no rounds played'\n\n        return (\n            <header>\n                <button onClick={this.handleOpenModal} className=\"header-btn\">What Is This?</button>\n                <ReactModal\n                    isOpen={this.state.showModal}\n                    contentLabel=\"Test\"\n                    onRequestClose={this.handleCloseModal}\n                    shouldCloseOnOverlayClick={true}\n                    className=\"about-modal\"\n                    overlayClassName=\"overlay\"\n                >\n                    <p style={{margin: \"10px\"}}>\n                        The <b>Monty Hall Problem</b> is an interesting stats puzzle named after the tv host of \n                        <a href=\"https://en.wikipedia.org/wiki/Let%27s_Make_a_Deal#The_Monty_Hall_Problem\"> Let's Make A Deal</a>.\n                        In this game, there are three doors: the prize is behind one door\n                        and goats are behind the other two doors. After the contestant chooses a door,\n                        the host reveals one door with a goat. Now there are two doors, two choices:\n                        do you stay with your choice or switch? Does it even matter?\n                    </p>\n                    <p style={{margin: \"10px\"}}>\n                        Do you think that the odds are now 50-50 because there are now two doors instead of three?\n                        That idea seems to make sense, but is incorrect! Brief explanation: the odds of choosing\n                        the winning door are 1/3, so the odds of that door losing are 2/3. Even though one door is opened,\n                        the odds of initially choosing the winning door don't change. Therefore, switching\n                        gives you the best odds of winning. Try running the simulator a bunch of times and you'll\n                        notice that the win rate of keeping your door hovers around 33%.\n                    </p>\n                </ReactModal>\n                <h2>Monty Hall Problem</h2>\n                <button onClick={this.handleOpenStats} className=\"header-btn\">Your Stats</button>\n                <ReactModal\n                    isOpen={this.state.showStats}\n                    contentLabel=\"Stats\"\n                    onRequestClose={this.handleCloseStats}\n                    shouldCloseOnOverlayClick={true}\n                    className=\"stats-modal\"\n                    overlayClassName=\"overlay\"\n                >\n                    <table style={{width: \"100%\"}}>\n                        <thead>\n                            <tr>\n                                <th>Strategy</th>\n                                <th># Wins</th>\n                                <th># Losses</th>\n                                <th>Win Rate</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <th>Switch</th>\n                                <th>{switchWins}</th>\n                                <th>{switchLosses}</th>\n                                <th>{switchWinRate}</th>\n                            </tr>\n                            <tr>\n                                <th>Stay</th>\n                                <th>{stayWins}</th>\n                                <th>{stayLosses}</th>\n                                <th>{stayWinRate}</th>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ReactModal>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport Header from './Header';\nimport Keyboard, { Cursor } from 'react-mk'\n\nclass MontyGame extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: null,\n            revealed: [false, false, false],\n            switched: false,\n            finished: false,\n            winner: Math.ceil(Math.random() * 3)\n        }\n        this.stayWins = parseInt(window.localStorage.getItem('stayWins')) || 0;\n        this.stayLosses = parseInt(window.localStorage.getItem('stayLosses')) || 0;\n        this.switchWins = parseInt(window.localStorage.getItem('switchWins')) || 0;\n        this.switchLosses = parseInt(window.localStorage.getItem('switchLosses')) || 0;\n    }\n\n    handleClick = (i) => {\n        const nonSelected = [1, 2, 3].filter(x => { return x !== i });\n        const finished = this.state.selected;\n        let revealed = null;\n        let revealedDoors = [...this.state.revealed];\n        let switched = this.state.selected && i !== this.state.selected;\n        if (!finished) {\n            while (!revealed) {\n                revealed = nonSelected[Math.floor(Math.random() * nonSelected.length)];\n                if (revealed === this.state.winner) revealed = null;\n            }\n            revealedDoors[revealed - 1] = true;\n        } else {\n            revealedDoors = [true, true, true];\n        }\n        this.setState({\n            selected: i,\n            revealed: revealedDoors,\n            switched,\n            finished\n        });\n    }\n\n    handleSubmit = () => {\n        this.setState({\n            selected: null,\n            revealed: [false, false, false],\n            switched: false,\n            finished: false,\n            winner: Math.ceil(Math.random() * 3)\n        })\n    };\n\n    renderDoor(i) {\n        return <Door key={i.toString()} onClick={() => this.handleClick(i)}\n        isSelected={this.state.selected === i} isOpened={this.state.revealed[i - 1]}\n        isWinner={i === this.state.winner} />;\n    }\n\n    render() {\n        let status = 'Choose a door: ';\n        let revealedStatus = '';\n        let finishedMsg = '';\n        if (this.state.selected && !this.state.finished) {\n            status = `You've chosen door #${this.state.selected}. Click on your final choice. `\n            revealedStatus = `Behind door #${this.state.revealed.indexOf(true) + 1} is a G.O.A.T! `\n        } else if (this.state.finished) {\n            status = '';\n            if (this.state.winner === this.state.selected) {\n                finishedMsg = \"Congrats, you've chosen the winning door! \"\n                if (this.state.switched) {\n                    this.switchWins += 1;\n                    window.localStorage.setItem('switchWins', this.switchWins);\n                } else {\n                    this.stayWins += 1;\n                    window.localStorage.setItem('stayWins', this.stayWins);\n                }\n            } else {\n                finishedMsg = `Sorry, the prize was behind door #${this.state.winner}. `\n                if (this.state.switched) {\n                    this.switchLosses += 1;\n                    window.localStorage.setItem('switchLosses', this.switchLosses);\n                } else {\n                    this.stayLosses += 1;\n                    window.localStorage.setItem('stayLosses', this.stayLosses);\n                }\n            }\n            finishedMsg = finishedMsg.concat('Click \"reset\" to try again. ')\n        }\n\n        return (\n            <div className=\"monty-game\">\n                <Header />\n                <div className=\"doors\">\n                    {this.renderDoor(1)}\n                    {this.renderDoor(2)}\n                    {this.renderDoor(3)}\n                </div>\n                <div className=\"status\" style={{ marginTop: \"17px\" }}>\n                    {!this.state.finished && <Keyboard keyPressDelayRange={[20, 40]} sentenceDelayPerCharRange={[0, 0]}>{status}</Keyboard>}\n                    <Cursor blinkAnimationDuration={1000}></Cursor><br/>\n                    {this.state.revealed && <Keyboard keyPressDelayRange={[20, 40]} sentenceDelayPerCharRange={[0, 0]}>{revealedStatus}</Keyboard>}\n                    {this.state.finished && <Keyboard keyPressDelayRange={[20, 40]} sentenceDelayPerCharRange={[0, 0]}>{finishedMsg}</Keyboard>}<br/>\n                    {this.state.finished && <button className=\"header-btn\" onClick={this.handleSubmit}>Reset</button>}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass Door extends React.Component {\n\n    render() {\n        let doorname = \"door\";\n        let revealClass = \"init-door\";\n        if (this.props.isOpened){\n            doorname = \"door door-open\";\n            revealClass = \"backdoor\";\n            if (this.props.isWinner) revealClass = \"winning-door\";\n        }\n        if (this.props.isSelected) doorname = doorname.concat(' selected');\n\n        return (\n            <div className={revealClass}>\n                <div className={doorname}>\n                    <img src=\"https://www.pnglot.com/pngfile/detail/172-1721328_tardis-door-opening-gif.png\" alt=\"tardis-door\" onClick={() => this.props.onClick()}></img>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MontyGame;","import React from 'react';\nimport MontySim from './MontySim'\nimport MontyGame from './MontyGame'\nimport './App.css';\n\nconst App = () => (\n  <div className=\"app\">\n    <MontyGame />\n    <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around'}}>\n      <MontySim />\n      <img src=\"https://upload.wikimedia.org/wikipedia/en/b/be/Probability_diagram_for_Monty_Hall_problem.gif\" alt=\"prob-diagram\"></img>\n    </div>\n  </div>\n)\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}